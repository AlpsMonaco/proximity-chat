// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: message/message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Chat_NewNode_FullMethodName = "/message.Chat/NewNode"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	NewNode(ctx context.Context, opts ...grpc.CallOption) (Chat_NewNodeClient, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) NewNode(ctx context.Context, opts ...grpc.CallOption) (Chat_NewNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[0], Chat_NewNode_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatNewNodeClient{stream}
	return x, nil
}

type Chat_NewNodeClient interface {
	Send(*NodeRequest) error
	Recv() (*NodeReply, error)
	grpc.ClientStream
}

type chatNewNodeClient struct {
	grpc.ClientStream
}

func (x *chatNewNodeClient) Send(m *NodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatNewNodeClient) Recv() (*NodeReply, error) {
	m := new(NodeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	NewNode(Chat_NewNodeServer) error
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) NewNode(Chat_NewNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method NewNode not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_NewNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).NewNode(&chatNewNodeServer{stream})
}

type Chat_NewNodeServer interface {
	Send(*NodeReply) error
	Recv() (*NodeRequest, error)
	grpc.ServerStream
}

type chatNewNodeServer struct {
	grpc.ServerStream
}

func (x *chatNewNodeServer) Send(m *NodeReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatNewNodeServer) Recv() (*NodeRequest, error) {
	m := new(NodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewNode",
			Handler:       _Chat_NewNode_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message/message.proto",
}
